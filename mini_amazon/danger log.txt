1. Because we need the front-end Django server and the back-end interactive server to jointly maintain the database, and use different languages ​​for development. So after the front-end orders are successfully placed, how to notify the back-end is a problem.
 We have considered two solutions. The first one is that the backend keeps reading the database, but this will cause a lot of overhead. The second is to use the Django project as a client, send a socket request to the C++ server, and tell it the order number, indicating that the order operation has been completed.
2. When we tested, due to the use of different sending strategies, we encountered some problems during the IG test, and it took 2-3 days to test each other. For example, one group uses multiple packages to package and send together, and another group uses each package to send requests separately.
3. We need to maintain the database at both the front and back ends, but when interacting later, the definition of some fields is unclear, which leads to problems in the interaction. Because we spent some time fixing and unifying the fields.